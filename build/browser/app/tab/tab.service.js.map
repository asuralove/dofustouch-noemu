{"version":3,"sources":["../src/browser/app/tab/tab.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAA2C;AAI3C,IAAa,UAAU;IADvB;QAGY,SAAI,GAAS,EAAE,CAAC;IA8C5B,CAAC;IA5CG,4BAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAED,2BAAM,GAAN,UAAO,EAAU;QACb,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAC,GAAO;YAC5B,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACV,CAAC;IAED,2BAAM,GAAN,UAAO,GAAQ;QACX,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IAED,+BAAU,GAAV,UAAW,OAAY;QACnB,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAC,GAAO;YAChC,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAA,CAAC,IAAI,CAAC,CAAA,CAAC;YACL,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnB,CAAC;QAED,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAC,GAAO;YAC5B,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,OAAO,CAAC,EAAE,CAAC;QAC/B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAA,CAAC,IAAI,CAAC,CAAA,CAAC;YACL,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,GAAC,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED,8BAAS,GAAT,UAAU,GAAQ;QACd,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;QAC1B,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAEnC,EAAE,CAAA,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAA,CAAC;YACb,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC/B,CAAC;IACL,CAAC;IAEL,iBAAC;AAAD,CAhDA,AAgDC,IAAA;AAhDY,UAAU;IADtB,iBAAU,EAAE;;GACA,UAAU,CAgDtB;AAhDY,gCAAU","file":"tab.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Tab } from './tab';\n\n@Injectable()\nexport class TabService {\n\n    private tabs:Tab[] = [];\n\n    getTabs(): Tab[]{\n        return this.tabs;\n    }\n\n    getTab(id: number): Tab {\n        return this.tabs.filter((tab:Tab) => {\n            return tab.id === id;\n        })[0];\n    }\n\n    addTab(tab: Tab): void {\n        this.tabs.push(tab);\n    }\n\n    getNearTab(nearTab: Tab): Tab {\n        let tabs = this.tabs.filter((tab:Tab) => {\n            return tab.id > nearTab.id;\n        });\n\n        if(tabs){\n            return tabs[0];\n        }\n\n        tabs = this.tabs.filter((tab:Tab) => {\n            return tab.id < nearTab.id;\n        });\n\n        if(tabs){\n            return tabs[(tabs.length-1)];\n        }\n\n        return null;\n    }\n\n    removeTab(tab: Tab): void {\n        console.log('remove tab');\n        let index = this.tabs.indexOf(tab);\n\n        if(index !== -1){\n            console.log('remove');\n            this.tabs.splice(index, 1);\n        }\n    }\n\n}\n"]}