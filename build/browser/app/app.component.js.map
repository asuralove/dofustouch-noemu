{"version":3,"sources":["../src/browser/app/app.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,sCAA6E;AAC7E,iDAA6C;AAC7C,iCAA8B;AAO9B,IAAa,YAAY;IAKrB,sBACY,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAHlC,aAAQ,GAAQ,IAAI,CAAC;IAMrB,CAAC;IAED,8BAAO,GAAP;QACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;QACtC,4CAA4C;IAChD,CAAC;IAED,6BAAM,GAAN;QACI,IAAI,GAAG,GAAQ,IAAI,SAAG,EAAE,CAAC;QACzB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAE5B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IAED,gCAAS,GAAT,UAAU,GAAQ;QAEd,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,IAAI,GAAG,CAAC,EAAE,KAAK,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA,CAAC;YACtD,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YACpC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QAGzB,CAAC;QAED,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IACnC,CAAC;IAED,gCAAS,GAAT,UAAU,GAAQ;QACd,EAAE,CAAA,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAA,CAAC;YACvB,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,KAAK,CAAC;QAClC,CAAC;QAED,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;IACxB,CAAC;IAED,+BAAQ,GAAR;QACI,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,gBAAgB;IACpB,CAAC;IACL,mBAAC;AAAD,CAhDA,AAgDC,IAAA;AAhDY,YAAY;IALxB,gBAAS,CAAC;QACP,QAAQ,EAAE,aAAa;QACvB,WAAW,EAAE,wBAAwB;QACrC,SAAS,EAAE,CAAC,uBAAuB,CAAC;KACvC,CAAC;qCAO0B,wBAAU;GANzB,YAAY,CAgDxB;AAhDY,oCAAY","file":"app.component.js","sourcesContent":["import {Component, Optional, ViewEncapsulation, Inject} from '@angular/core';\nimport {TabService} from './tab/tab.service';\nimport {Tab} from './tab/tab';\n\n@Component({\n    selector: 'application',\n    templateUrl: 'app/app.component.html',\n    styleUrls: ['app/app.component.css'],\n})\nexport class AppComponent {\n    lastDialogResult: string;\n    tabs: Tab[];\n    activTab: Tab = null;\n\n    constructor(\n        private tabService: TabService\n    ) {\n\n    }\n\n    getTabs(): void {\n        this.tabs = this.tabService.getTabs();\n        //this.activTab = this.tabService.getTab(0);\n    }\n\n    addTab(): void {\n        let tab: Tab = new Tab();\n        this.tabService.addTab(tab);\n\n        this.selectTab(tab);\n    }\n\n    removeTab(tab: Tab): void {\n\n        if(this.activTab !== null && tab.id === this.activTab.id){\n            console.log('activTab was deleted');\n            this.activTab = null;\n            //let newTab = this.tabService.getNearTab(tab);\n            //this.selectTab(newTab.id)\n        }\n\n        this.tabService.removeTab(tab);\n    }\n\n    selectTab(tab: Tab): void {\n        if(this.activTab !== null){\n            this.activTab.isFocus = false;\n        }\n\n        tab.isFocus = true;\n        this.activTab = tab;\n    }\n\n    ngOnInit(): void {\n        this.getTabs();\n        //this.addTab();\n    }\n}\n"]}